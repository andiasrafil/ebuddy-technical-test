name: CI/CD Workflow

on:
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest

    - name: Install Dependencies
      run: |
        brew bundle

    - name: Build and Run Tests
      run: |
        xcodebuild test \
          -scheme "ebuddy" \
          -destination "platform=iOS Simulator,name=iPhone 16,OS=latest" \
          -derivedDataPath build \
          -enableCodeCoverage YES
      env:
        CI: true

    - name: Debug Derived Data
      run: |
        echo "Checking DerivedData for results..."
        find build -name "*.xcresult" || echo "No .xcresult files found"

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          build/Logs/Test/*.xcresult

  code-coverage:
    name: Generate Code Coverage
    needs: build-and-test
    runs-on: macos-latest

    steps:
    - name: Download Coverage Report
      uses: actions/download-artifact@v3
      with:
        name: coverage-report
        path: ./coverage

    - name: Extract Coverage from xcresult
      run: |
        xcrun xcresulttool get --path ./coverage/*.xcresult --format json > xcresult.json
        echo "Coverage data extracted."

    - name: Generate Coverage Summary
      run: |
        xcrun xccov view ./coverage/*.xcresult --report --json > coverage-summary.json

    - name: Create Readable Coverage Report
      run: |
        python3 <<EOF
        import json
        with open("coverage-summary.json", "r") as f:
            data = json.load(f)
        
        # Extract relevant coverage info
        targets = data.get("targets", [])
        report_lines = []
        report_lines.append("# Code Coverage Report")
        report_lines.append("")
        for target in targets:
            name = target.get("name", "Unknown Target")
            coverage = target.get("coverage", {}).get("lineCoverage", 0) * 100
            report_lines.append(f"- **{name}**: {coverage:.2f}% line coverage")
        
        with open("coverage-report.md", "w") as out:
            out.write("\n".join(report_lines))
        EOF

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-md
        path: coverage-report.md

    - name: Post Readable Coverage Comment
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        path: coverage-report.md

